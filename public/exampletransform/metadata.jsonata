$.(
	$comment := '*******************************************************';
    $comment := '*******************************************************';
    $comment := 'TRANSFORM TO FLATTEN ALL DATA';
    $comment := 'Author: Martin Holden';
    $comment := 'Date: 31-MAR-2019';
    $comment := '*******************************************************';
    $comment := '*******************************************************';

	$comment := '*******************************************************';
    $comment := '* Controls the number of values returned when we flatten';
	$comment := '* the arrays/objects';
    $globalMaxCount := 5;

    $comment := '*******************************************************';
    $comment := '* Take an array of objects, and return a JSON object where:';
    $comment := '*      JSON Key is $prefix with incrementing value e.g. KEY1, KEY2';
    $comment := '*      JSON Value is the value e.g. en-us, or if array of objects a';
    $comment := '*        $delimiter delimited string. e.g. en-us|Title1|Description1';
    $comment := '* @param {string} $source - The array';
    $comment := '* @param {string} $prefix - The prefix to use as the JSON Key';
    $comment := '* @param {number} [$maxCount=10] - The number of Keys';
    $comment := '* @param {string} [$delimiter=|] - The delimiter for Object strings';
    $comment := '* @returns {Object}';
    $comment := '*******************************************************';  
    $flattenArrayAndObject := function($source, $prefix, $maxCount, $delimiter) {(
        $maxCount := $maxCount ? $maxCount : $globalMaxCount;
        $delimiter := $delimiter ? $delimiter : '|';

        $padarray := [1..$maxCount].('');
        $sourceArray := $count($source)=0 ? [] : [];
        $result := '';
        
        $sourceArray := $append($sourceArray, $map($source, function ($v, $i, $a) {(
            $model := $count($keys($v)) > 0 ? $v : { 'key': $v ? $v : '' };
            $needdelimiter:= $count($keys($v)) > 0 ? $delimiter : '';
            $trimend:= $count($keys($v)) > 0;
            $kv := $spread($model);
            $result:= $reduce($kv, function($accum, $val) {(
                $accum & $each($val, function($val, $key) {$val}) & $needdelimiter;
            )}, '');
                $trimend ? $substring($result,0,$length($result)-1) : $result;
        )})
        );

        $sourceArray := $filter($sourceArray, function ($v, $i, $a) {
            $v != ''
        });

        $sourceArray := $append($sourceArray, $padarray);
    
        $sourceArray := $filter($sourceArray, function ($v, $i, $a) {
            $i < $maxCount
        });

        $sourceArrayDelimited := $map($sourceArray, function ($v, $i, $a) {
            $prefix & ($i + 1) & '~|~' & $v
        });

        $sourceArrayDelimited.{
            $substringBefore('~|~'): $substringAfter('~|~')
        }
    )};

    $comment := '*******************************************************';

    $localeLongHand := [];
    $localeLongHand := $append($localeLongHand,$map(localeCodes, function ($v, $i, $a) {(
            $v & '|' & $languageInfo($v);
            )}
       )
    );
    $localeLongHandFlattened := ($flattenArrayAndObject($localeLongHand, 'localeWithLanguageCalculated'));


    $localeCodes := ($flattenArrayAndObject(localeCodes, 'localeCodes', $globalMaxCount));
    $keywords := ($flattenArrayAndObject(keywords, 'keywords', $globalMaxCount));
    $localizedMetadata := ($flattenArrayAndObject(localizedMetadata, 'localizedMetadata', $globalMaxCount));
    $by := ($flattenArrayAndObject(by, 'by', $globalMaxCount));
    $expertiseLevels := ($flattenArrayAndObject(expertiseLevels, 'expertiseLevels', $globalMaxCount));
    $modalities := ($flattenArrayAndObject(modalities, 'modalities', $globalMaxCount));
    $technologies := ($flattenArrayAndObject(technologies, 'technologies', $globalMaxCount));
    $associationsAreas := ($flattenArrayAndObject(associations.areas, 'associations.areas', $globalMaxCount));
    $associationsSubjects := ($flattenArrayAndObject(associations.subjects, 'associations.subjects', $globalMaxCount));
    $associationsChannels := ($flattenArrayAndObject(associations.channels, 'associations.channels', $globalMaxCount));
    $associationsParent := ($flattenArrayAndObject(associations.parent, 'associations.parent', $globalMaxCount));

    $transformed_data := (
        $.{
        'id' : id,
        'shortenid': $shortenUuid(id),
        'xapiActivityId': xapiActivityId,
        'xapiActivityTypeId': xapiActivityTypeId,
        'contentType.percipioType': contentType.percipioType,
        'contentType.category': contentType.category,
        'contentType.displayLabel': contentType.displayLabel,
        'contentType.source': contentType.source,
        'lifecycle.status': lifecycle.status,
        'lifecycle.publishDate': lifecycle.publishDate,
        'lifecycle.lastUpdatedDate': lifecycle.lastUpdatedDate,
        'link': link,
        'linkHostname': $parseUrl(link).hostname,
        'imageUrl': imageUrl,
        'imageUrlPath': $parseUrl(imageUrl).pathname,
        'duration': duration,
        'durationformatted': (
        	$duration := duration ? $momentDuration(duration):  $momentDuration('PT0H');
            $formatNumber($floor($duration.asHours()),'#00') & ':' & $formatNumber($floor($duration.minutes()),'00') & ':' & $formatNumber($floor($duration.seconds()),'00')
          ),
         'associations.translationGroupId': associations.translationGroupId,
         'localizedMetadata[0].descriptionAsText': localizedMetadata[0].description ? $htmltotext(localizedMetadata[0].description) : null,
         'localizedMetadata[0].descriptionAsTextTruncated': localizedMetadata[0].description ? $truncate($htmltotext(localizedMetadata[0].description), { 'length': 30 , 'omission': '...', 'wordbreakregex': '[\\s\\.%,:;\\?_]'}) : null
    });

    $results := $merge([$transformed_data, $linkParsed, $localeCodes, $localeLongHandFlattened, $localizedMetadata, $keywords, $by, $expertiseLevels, $modalities, $technologies, $associationsAreas, $associationsSubjects, $associationsChannels, $associationsParent]);
    $results;
)
